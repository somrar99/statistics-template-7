addMdToPage("# Politisk f√∂r√§ndring i Sverige mot bakgrund av √∂verkomliga bost√§der (2018-2022)");
addToPage(`Valresultat 2018 och 2022: H√§mtade fr√•n en Neo4j-baserad databas och omvandlades till JSON-format (neo4j.json). 
  Det har skett lokala f√∂r√§ndringar i svensk politik mellan 2018 och 2022, 
  men den √∂vergripande strukturen f√∂r partist√∂d har varit relativt stabil.`)

let vansterPartier = ['Arbetarepartiet-Socialdemokraterna', 'V√§nsterpartiet', 'Milj√∂partiet de gr√∂na', 'Centerpartiet'];
let hogerPartier = ['Moderaterna', 'Kristdemokraterna', 'Liberalerna', 'Sverigedemokraterna'];

// –°—É–º–º–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º

console.log([...new Set(electionResultsForWork.map(x => x.parti))])
let totalVanster2018 = electionResultsForWork
  .filter(x => vansterPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2018), 0);

let totalVanster2022 = electionResultsForWork
  .filter(x => vansterPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2022), 0);

let totalHoger2018 = electionResultsForWork
  .filter(x => hogerPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2018), 0);

let totalHoger2022 = electionResultsForWork
  .filter(x => hogerPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2022), 0);

// –û–±—â–∞—è —Å—É–º–º–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ
let total2018 = totalVanster2018 + totalHoger2018;
let total2022 = totalVanster2022 + totalHoger2022;

// –ü—Ä–æ—Ü–µ–Ω—Ç—ã
let percentVanster2018 = (totalVanster2018 / total2018 * 100).toFixed(1);
let percentVanster2022 = (totalVanster2022 / total2022 * 100).toFixed(1);
let percentHoger2018 = (totalHoger2018 / total2018 * 100).toFixed(1);
let percentHoger2022 = (totalHoger2022 / total2022 * 100).toFixed(1);

addToPage(`
  <section style="margin-top: 2em;">

    <h3 style="text-align: center;">R√∂ster per block ‚Äì hela landet</h3>

    <div style="display: flex; justify-content: space-between; gap: 40px; margin-top: 1.5em;">

      <div style="flex: 1; padding: 1em; background-color: #f9f9f9; border-radius: 0px;">
        <h4 style="text-align: center;">üó≥Ô∏è √Ör 2018</h4>
        <ul style="list-style-type: none; padding: 0;">
          <li><strong>V√§nsterblocket:</strong> ${totalVanster2018.toLocaleString('sv-SE')} r√∂ster (${percentVanster2018}%)</li>
          <li><strong>H√∂gerblocket:</strong> ${totalHoger2018.toLocaleString('sv-SE')} r√∂ster (${percentHoger2018}%)</li>
        </ul>
      </div>

      <div style="flex: 1; padding: 1em; background-color: #f9f9f9; border-radius: 0px;">
        <h4 style="text-align: center;">üó≥Ô∏è √Ör 2022</h4>
        <ul style="list-style-type: none; padding: 0;">
          <li><strong>V√§nsterblocket:</strong> ${totalVanster2022.toLocaleString('sv-SE')} r√∂ster (${percentVanster2022}%)</li>
          <li><strong>H√∂gerblocket:</strong> ${totalHoger2022.toLocaleString('sv-SE')} r√∂ster (${percentHoger2022}%)</li>
        </ul>
      </div>

    </div>

  </section>
`);






// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
let blockData = [
  { √•r: '2018', V√§nster: totalVanster2018, H√∂ger: totalHoger2018 },
  { √•r: '2022', V√§nster: totalVanster2022, H√∂ger: totalHoger2022 }
];


// –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
drawGoogleChart({
  type: 'ColumnChart',
  data: makeChartFriendly(blockData, '√•r', 'V√§nster', 'H√∂ger'),
  options: {
    title: 'V√§nster- och h√∂gerblockets r√∂ster i hela landet (2018 vs 2022)',
    height: 500,
    legend: { position: 'top' },
    hAxis: {
      title: '√Ör',
      slantedText: true
    },
    vAxis: {
      title: 'Antal r√∂ster',
      format: '#',
      minValue: 0 // ‚Üê —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    },
    chartArea: { left: 80, width: '80%' },
    colors: ['#dc3912', '#3366cc'] // —Å–∏–Ω–∏–π –∏ –∫—Ä–∞—Å–Ω—ã–π, –∫–∞–∫ –≤ –ª–µ–≥–µ–Ω–¥–µ
  }
});


// Kommuner d√§r vinnande parti har √§ndrats (2018 ‚Üí 2022)
let kommunerMedByte = sammanstallning
  .filter(r => r.byte === "!!! Ja!!!")
  .map(r => r.kommun);

// Kommuner d√§r samma parti vann b√•de 2018 och 2022
let stabilaKommuner = sammanstallning
  .filter(r => r.byte === "-")
  .map(r => r.kommun);





addMdToPage("### Vinnande parti per kommun - med byte mellan 2018 och 2022");

addToPage(`
  <h3>Antal kommuner med partibyte (2018‚Äì2022):</h3>
  <p style="font-size: 1.2em; font-weight: bold; color: darkred;">
    ${kommunerMedByte.length} kommuner har bytt vinnande parti
  </p>
`);

addToPage(`I m√•nga kommuner byttes valvinnaren ut, men de tre st√∂rsta partierna f√∂rblev desamma:
Socialdemokraterna, Sverigedemokraterna och Moderaterna.`)


/*
tableFromData({
  data: sammanstallning.map(row => {
    const highlight = row.byte === " Ja";
    return {
      kommun: row.kommun,
      vinnare2018: row.vinnare2018,
      roster2018: row.roster2018,
      vinnare2022: row.vinnare2022,
      roster2022: row.roster2022,
      byte: row.byte
    };
  })
});
*/

//console.log(electionResultsForWork.filter(x => x.parti === "Liberalerna "));

// –î–æ—Å—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–æ–¥–æ–≤ –∏ –ø–∞—Ä—Ç–∏–π
let years = [2018, 2022];
let partier = [...new Set(electionResultsForWork.map(x => x.parti))].sort();

// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
let year = addDropdown('V√§lj √•r', years, 2022);

// –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
let totalVotes = s.sum(
  electionResultsForWork.map(x => year === 2018 ? +x.roster2018 : +x.roster2022)
);

// –¢–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏
let percentPerParty = partier.map(parti => {
  let partyVotes = s.sum(
    electionResultsForWork
      .filter(x => x.parti === parti)
      .map(x => year == 2018 ? +x.roster2018 : +x.roster2022)
  );

  let percent = ((partyVotes / totalVotes) * 100).toFixed(1);

  return { parti, percent: +percent }; // ‚úÖ –ø–ª—é—Å –¥–µ–ª–∞–µ—Ç —á–∏—Å–ª–æ
});

// –í—ã–≤–µ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log(percentPerParty);


// –†–∏—Å—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
drawGoogleChart({
  type: 'PieChart',
  data: makeChartFriendly(
    percentPerParty,
    'parti', 'percent'
  ),
  options: {
    title: `R√∂stf√∂rdelning per parti (${year})`,
    height: 500,
    pieHole: 0.4, // –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π "donut chart", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    chartArea: { left: "10%" }
  }
});


// 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
let top3Partier = percentPerParty
  .sort((a, b) => b.percent - a.percent)
  .slice(0, 3) // —Ç–æ–ª—å–∫–æ 3 –ª—É—á—à–∏–µ
  .map(x => x.parti); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–π


//–ö—Ä–∞—Ç–∫–æ: –Ω–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã, –∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ª–∏–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç.
//1. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π:

let procentPerParti = {}; // { 'Partinamn': [procent1, procent2, ...], ... }

for (let kommun in grupperadElectionResultsForWork) {
  let lista = grupperadElectionResultsForWork[kommun];

  let total = s.sum(lista.map(r => +r[`roster${year}`]));

  for (let rad of lista) {
    let parti = rad.parti;
    let partiroster = +rad[`roster${year}`];
    let procent = (partiroster / total) * 100;

    if (!procentPerParti[parti]) procentPerParti[parti] = [];

    procentPerParti[parti].push(+procent.toFixed(2));
  }
}
//2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ procentBuckets:

let procentBuckets = {}; // { 'Partinamn': {0: 5, 1: 8, 2: 3, ...}, ... }

for (let parti in procentPerParti) {
  let procentLista = procentPerParti[parti];

  let partiBuckets = {};

  for (let p of procentLista) {
    let bucket = Math.floor(p); // –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ —Ü–µ–ª–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    partiBuckets[bucket] = (partiBuckets[bucket] || 0) + 1;
  }

  procentBuckets[parti] = partiBuckets;
}
//3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:

let procentInterval = Array.from({ length: 101 }, (_, i) => i); // 0‚Äì100%

let dataForChart = procentInterval.map(p => {
  let row = { 'Procent r√∂ster': p };

  for (let parti in procentBuckets) {
    row[parti] = procentBuckets[parti][p] || 0; // –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞, —Å—Ç–∞–≤–∏–º 0
  }

  return row;
});
//4. –°—Ç—Ä–æ–∏–º –ª–∏–Ω–∏–∏ –Ω–∞ LineChart:

drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(
    dataForChart,
    'Procent r√∂ster',
    ...Object.keys(procentBuckets) // –≤—Å–µ –ø–∞—Ä—Ç–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  ),
  options: {
    title: 'R√∂stf√∂rdelning per parti i kommunerna',
    height: 500,
    //curveType: 'function',
    legend: { position: 'top', maxLines: 3 },
    hAxis: {
      title: 'Procent r√∂ster',
      viewWindow: {
        min: 0,
        max: 55
      }
    },
    vAxis: { title: 'Antal kommuner' },
    chartArea: { left: 60, top: 60, width: '80%', height: '70%' },
    tooltip: { isHtml: true },  // –≤–∫–ª—é—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML tooltip
  }
});




let chosenParti = addDropdown('V√§lj parti', partier);

// –°–æ–±–∏—Ä–∞–µ–º % –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é –ø–æ kommun
let procentData = [];

for (let kommun in grupperadElectionResultsForWork) {
  let lista = grupperadElectionResultsForWork[kommun];

  let total = s.sum(lista.map(r => +r[`roster${year}`]));
  let partiRad = lista.find(r => r.parti === chosenParti);
  if (!partiRad) continue;

  let partiroster = +partiRad[`roster${year}`];
  let procent = (partiroster / total) * 100;

  procentData.push({
    kommun,
    procent: +procent.toFixed(2)
  });
}


dbQuery.use('geo-mysql');
let geoData = await dbQuery('SELECT * FROM geoData  ORDER BY latitude');

// 1. –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å kommun ‚Üí l√§n
let kommunTillLan = {};
for (let row of geoData) {
  kommunTillLan[row.municipality] = row.county;
}

// 2. –°—Ç—Ä–æ–∏–º lanByteRaknare –Ω–∞ –æ—Å–Ω–æ–≤–µ kommunerMedByte
let lanByteRaknare = {};
for (let kommun of kommunerMedByte) {
  let geoRad = geoData.find(x => x.municipality === kommun);
  if (!geoRad) continue;

  let lan = geoRad.county;
  if (!lanByteRaknare[lan]) {
    lanByteRaknare[lan] = 0;
  }
  lanByteRaknare[lan]++;
}



// –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ –∏ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
let percentChanges = electionResultsForWork
  .filter(x => x.parti === chosenParti && +x.roster2018 > 0) // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º—É–Ω—ã —Å 0 –≥–æ–ª–æ—Å–æ–≤ –≤ 2018
  .map(x => ((+x.roster2022 / +x.roster2018) - 1) * 100);


// 2. –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
let mean = s.mean(percentChanges);
let stdDev = s.standardDeviation(percentChanges);

// 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
let binWidth = 5;
let bins = {};
for (let change of percentChanges) {
  let bin = Math.floor(change / binWidth) * binWidth;
  bins[bin] = (bins[bin] || 0) + 1;
}

// 4. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—ã –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
let histogramData = Object.entries(bins).map(([bin, count]) => ({
  'F√∂r√§ndring (%)': +bin,
  'Antal kommuner': count,
  'Teoretisk normalf√∂rdelning': null
}));

// 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é
let minX = Math.min(...percentChanges) - 10;
let maxX = Math.max(...percentChanges) + 10;
let stepSize = 0.5; // —à–∞–≥ –ø–æ –æ—Å–∏ X

for (let x = minX; x <= maxX; x += stepSize) {
  let yDensity = (1 / (stdDev * Math.sqrt(2 * Math.PI))) * Math.exp(-((x - mean) ** 2) / (2 * stdDev ** 2));
  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –≤—ã—Å–æ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º—É–Ω
  let scaledY = yDensity * percentChanges.length * binWidth;

  histogramData.push({
    'F√∂r√§ndring (%)': x,
    'Antal kommuner': null,
    'Teoretisk normalf√∂rdelning': scaledY
  });
}

// 6. –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
drawGoogleChart({
  type: 'ComboChart',
  data: makeChartFriendly(
    histogramData,
    'F√∂r√§ndring (%)', 'Antal kommuner', 'Teoretisk normalf√∂rdelning'
  ),
  options: {
    title: `Procentuell f√∂r√§ndring i r√∂ster f√∂r ${chosenParti} mellan 2018 och 2022`,
    height: 500,
    seriesType: 'bars', // –±–∞–∑–æ–≤–∞—è —Å–µ—Ä–∏—è - —Å—Ç–æ–ª–±–∏–∫–∏
    series: {
      1: { type: 'line', color: 'red', lineWidth: 3 } // –≤—Ç–æ—Ä–∞—è —Å–µ—Ä–∏—è - –ª–∏–Ω–∏—è
    },
    vAxis: { title: 'Antal kommuner' },
    hAxis: { title: 'F√∂r√§ndring (%)' },
    legend: { position: 'top', alignment: 'center' },
    chartArea: { left: 50, top: 60, width: '80%', height: '70%' }
  }
});

//–ü–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Shapiro-Wilk
// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤
let result = stdLib.stats.shapiroWilkTest(percentChanges);

// 2. –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
addMdToPage(`
### üìê Shapiro-Wilk normalitetstest f√∂r procentuell f√∂r√§ndring

- **p-v√§rde**: ${result.p.toFixed(4)}
- ${result.p < 0.05
    ? "‚ùå F√∂rdelningen verkar inte vara normalf√∂rdelad. Eftersom Shapiro-Wilks test gav ett p-v√§rde p√• noll kan vi inte anv√§nda T-testet. D√§rf√∂r beh√∂ver vi ist√§llet v√§nja oss vid att arbeta med korrelationsber√§kningar och olika icke-parametriska testmetoder."
    : "‚úÖ F√∂rdelningen verkar vara normalf√∂rdelad"}
`);




//Dataset fr√•n https:/ / www.statistikdatabasen.scb.se / pxweb / sv / ssd / START__BO__BO0501__BO0501B / FastprisSHRegionAr / sortedtable / tableViewSorted /


addMdToPage(`
  ### L√§nsinfo, fr√•n SQlite
  Info om HusPriser per kommun i tussen kronor
  `);
dbQuery.use('HusPris-sqlite');
let meddelHusPris = await dbQuery('SELECT SUBSTR(Region, 6) AS Kommun,  "2018",  "2022" FROM HusPrisITusenKr; ');
//tableFromData({ data: meddelHusPris });
console.log(meddelHusPris);


dbQuery.use('kommun-info-mongodb');
let income = await dbQuery.collection('incomeByKommun').find({});

// –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
let cleanedIncome = income.map(doc => ({
  kommun: doc.kommun,
  medelInkomst2018: doc.medelInkomst2018,
  medelInkomst2022: doc.medelInkomst2022
}));

//console.table(cleanedIncome.slice(0, 5));

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ—Ö–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–º—É–Ω—ã
let incomeMap = {};
cleanedIncome.forEach(doc => {
  incomeMap[doc.kommun] = {
    medel2018: doc.medelInkomst2018,
    medel2022: doc.medelInkomst2022
  };
});

// –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ü–µ–Ω–∞–º–∏ –∏ –¥–µ–ª–∏–º
let priceToIncome = meddelHusPris.map(row => {
  let kommun = row.Kommun;
  let income = incomeMap[kommun];

  let kvot2018 = row["2018"] / income.medel2018;
  let kvot2022 = row["2022"] / income.medel2022;
  let tillv√§xtInkomst = ((income.medel2022 - income.medel2018) / income.medel2018) * 100;
  let tillv√§xtKvot = ((kvot2022 - kvot2018) / kvot2018) * 100;

  return {
    kommun,
    'Tillv√§xt inkomst (%)': +tillv√§xtInkomst.toFixed(1),
    'Kvot 2018': +kvot2018.toFixed(2),
    'Kvot 2022': +kvot2022.toFixed(2),
    'Tillv√§xt kvot (%)': +tillv√§xtKvot.toFixed(1)
  };
});
//tableFromData({ data: priceToIncome });


//2. –°–æ—Ä—Ç–∏—Ä—É–µ–º:

let sortablePriceToIncome = [...priceToIncome].sort(
  (a, b) => a['Tillv√§xt kvot (%)'] - b['Tillv√§xt kvot (%)']
);




//3. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

let b√§stKommun = sortablePriceToIncome[0]; // —Å–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
let s√§mstKommun = sortablePriceToIncome[sortablePriceToIncome.length - 1]; // —Å–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ
//4. –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ —á–µ—Ä–µ–∑ addMdToPage:

addMdToPage(`
  ### üìà Tillv√§xt i boendeaffordabilitet (2018‚Äì2022)

Inkomstdata: Medell√∂n per kommun f√∂r √•ren 2018 och 2022 fr√•n MongoDB-databas (kommun-info-mongodb).

Huspriser: Medianpris p√• sm√•hus per kommun fr√•n en SQLite-databas (HusPris-sqlite).
[SCB: Fastpris p√• sm√•hus per region och √•r](https://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BO__BO0501__BO0501B/FastprisSHRegionAr/sortedtable/tableViewSorted)


üè† Bostadsr√§ttsl√§get har f√∂rs√§mrats n√§stan √∂verallt.
Studien visar att bostadsr√§ttsl√§get (kvot pris/inkomst) har f√∂rs√§mrats i de flesta kommuner.

Den st√∂rsta f√∂rs√§mringen observerades i kommuner som ${s√§mstKommun.kommun}, d√§r √∂verkomligheten minskade med mer √§n ${s√§mstKommun['Tillv√§xt kvot (%)']} procent.
I n√•gra kommuner har situationen tv√§rtom f√∂rb√§ttrats, men de √§r betydligt f√§rre till antalet.

Ber√§kningar:

Boendeaffordabilitet:
F√∂r varje kommun ber√§knades ett kvotm√•tt som 

Kvot = (Huspris) / (Inkomst) b√•de f√∂r 2018 och 2022.

Hur mycket kvoten f√∂r√§ndrats mellan √•ren:

Tillv√§xt kvot (%) = ((Kvot2022 - Kvot2018) / Kvot2018) √ó 100


 **Mest f√∂rs√§mrad tillg√§nglighet:**
  - Kommun: **${s√§mstKommun.kommun}**
  - Tillv√§xt kvot: **${s√§mstKommun['Tillv√§xt kvot (%)']}%**  
  - Kvot 2018: **${s√§mstKommun['Kvot 2018']}**
  - Kvot 2022: **${s√§mstKommun['Kvot 2022']}**

  **Mest f√∂rb√§ttrad tillg√§nglighet:**
  - Kommun: **${b√§stKommun.kommun}**
  - Tillv√§xt kvot: **${b√§stKommun['Tillv√§xt kvot (%)']}%**  
  - Kvot 2018: **${b√§stKommun['Kvot 2018']}**
  - Kvot 2022: **${b√§stKommun['Kvot 2022']}** 
`);


//–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
let sortedByKommun = [...priceToIncome].sort((a, b) =>
  a['kommun'].localeCompare(b['kommun'])
);

//tableFromData({ data: sortedByKommun });



let finalTable = priceToIncome.map(row => {
  let match = sammanstallning.find(s => s.kommun === row.kommun);

  return {
    ...row,
    vinnare2018: match ? match.vinnare2018 : null,
    vinnare2022: match ? match.vinnare2022 : null,
    byte: match ? match.byte : null
  };
});
//export default sammanstallning;
console.table(finalTable);



//1. –°—á–∏—Ç–∞–µ–º –ø–æ—Ç–µ—Ä—é –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–º—É–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏

let liberalerData = electionResultsForWork
  .filter(r => r.parti === 'Liberalerna')
  .map(r => ({
    kommun: r.kommun,
    diffProcent: ((+r.roster2022 - +r.roster2018) / +r.roster2018) * 100
  }));

let centerpartietData = electionResultsForWork
  .filter(r => r.parti === 'Centerpartiet')
  .map(r => ({
    kommun: r.kommun,
    diffProcent: ((+r.roster2022 - +r.roster2018) / +r.roster2018) * 100
  }));
//2. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:

let liberalerMap = {};
liberalerData.forEach(r => {
  liberalerMap[r.kommun] = r.diffProcent;
});

let centerpartietMap = {};
centerpartietData.forEach(r => {
  centerpartietMap[r.kommun] = r.diffProcent;
});
//3. –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: Kommun + –ø–æ—Ç–µ—Ä–∏ + Tillv√§xt kvot

let combinedData = priceToIncome.map(row => {
  let kommun = row.kommun;

  return {
    kommun,
    'Liberalerna r√∂ster diff (%)': liberalerMap[kommun] ?? null,
    'Centerpartiet r√∂ster diff (%)': centerpartietMap[kommun] ?? null,
    'Tillv√§xt kvot (%)': row['Tillv√§xt kvot (%)']
  };
});

//tableFromData({ data: combinedData });



//–û—Å—å X ‚Äî Tillv√§xt kvot(%)(–Ω–∞—Å–∫–æ–ª—å–∫–æ –∂–∏–ª—å—ë —Å—Ç–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–µ–µ / –¥–æ—Ä–æ–∂–µ)
//–û—Å—å Y ‚Äî Liberalerna r√∂ster diff(%) –∏–ª–∏ Centerpartiet r√∂ster diff(%)
//–†–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ ‚Äî –¥–ª—è –ª–∏–±–µ—Ä–∞–ª–æ–≤ –∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞.
//1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ:

let scatterDataLiberalerna = combinedData
  .filter(r => r['Liberalerna r√∂ster diff (%)'] !== null)
  .map(r => ({
    tillvaxtKvot: r['Tillv√§xt kvot (%)'],
    diffProcent: r['Liberalerna r√∂ster diff (%)']
  }));

let scatterDataCenterpartiet = combinedData
  .filter(r => r['Centerpartiet r√∂ster diff (%)'] !== null)
  .map(r => ({
    tillvaxtKvot: r['Tillv√§xt kvot (%)'],
    diffProcent: r['Centerpartiet r√∂ster diff (%)']
  }));



addMdToPage(`
  ### üìä Samband mellan bostadspris och f√∂r√§ndring i politiskt st√∂d
  
Ett f√∂rs√∂k gjordes att identifiera om f√∂rs√§mrad bostadspris p√•verkar f√∂r√§ndringen i r√∂ster p√• partier.
* F√∂r√§ndringen i antalet r√∂ster ber√§knas i relation till partiernas resultat fr√•n 2018, 
d√§r 2018 √•rs r√∂ster s√§tts till 100 %. 
Detta visar tydligare skillnader och hj√§lper till att identifiera trender. 
Exempelvis tappade Centerpartiet upp till 60 % i en av kommun, medan vinnande partier √∂kade sitt st√∂d med upp till 65 %.

**"Tv√• partier som f√∂rlorade flest r√∂ster"** syftar p√• de partier som tappade mest i v√§ljarst√∂d mellan valen 2018 och 2022.‚Äã
`);
//2. –†–∏—Å—É–µ–º ScatterChart –¥–ª—è –æ–±–µ–∏—Ö –ø–∞—Ä—Ç–∏–π:

drawGoogleChart({
  type: 'ScatterChart',
  data: [
    ['Tillv√§xt kvot (%)', 'Liberalerna (%)', 'Centerpartiet (%)'],
    ...scatterDataLiberalerna.map((r, idx) => [
      r.tillvaxtKvot,
      r.diffProcent,
      scatterDataCenterpartiet[idx] ? scatterDataCenterpartiet[idx].diffProcent : null
    ])
  ],
  options: {
    title: 'Samband mellan boendeaffordabilitet och partisupport',
    height: 500,
    hAxis: { title: 'Tillv√§xt kvot (%)' },
    vAxis: { title: 'F√∂r√§ndring i r√∂ster (%)' },
    legend: { position: 'top' },
    pointSize: 5,
    series: {
      0: { color: '#3498db', labelInLegend: 'Liberalerna' },
      1: { color: '#2ecc71', labelInLegend: 'Centerpartiet' }
    },
    chartArea: { left: 60, top: 50, width: '80%', height: '70%' }
  }
});

//1. –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ –¢–û–ü - 3 –ø–∞—Ä—Ç–∏–π:

let socialdemokraternaData = electionResultsForWork
  .filter(r => r.parti === 'Arbetarepartiet-Socialdemokraterna')
  .map(r => ({
    kommun: r.kommun,
    diffProcent: ((+r.roster2022 - +r.roster2018) / +r.roster2018) * 100
  }));

let moderaternaData = electionResultsForWork
  .filter(r => r.parti === 'Moderaterna')
  .map(r => ({
    kommun: r.kommun,
    diffProcent: ((+r.roster2022 - +r.roster2018) / +r.roster2018) * 100
  }));

let sverigedemokraternaData = electionResultsForWork
  .filter(r => r.parti === 'Sverigedemokraterna')
  .map(r => ({
    kommun: r.kommun,
    diffProcent: ((+r.roster2022 - +r.roster2018) / +r.roster2018) * 100
  }));
//2. –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:

let sMap = {}, mMap = {}, sdMap = {};

socialdemokraternaData.forEach(r => sMap[r.kommun] = r.diffProcent);
moderaternaData.forEach(r => mMap[r.kommun] = r.diffProcent);
sverigedemokraternaData.forEach(r => sdMap[r.kommun] = r.diffProcent);
//3. –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:

let combinedTop3 = priceToIncome.map(row => {
  let kommun = row.kommun;

  return {
    kommun,
    tillvaxtKvot: row['Tillv√§xt kvot (%)'],
    socialdemokraterna: sMap[kommun] ?? null,
    moderaterna: mMap[kommun] ?? null,
    sverigedemokraterna: sdMap[kommun] ?? null
  };
});
//4. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è scatter plot:

let scatterData = [
  ['Tillv√§xt kvot (%)', 'Socialdemokraterna (%)', 'Moderaterna (%)', 'Sverigedemokraterna (%)'],
  ...combinedTop3.map(r => [
    r.tillvaxtKvot,
    r.socialdemokraterna,
    r.moderaterna,
    r.sverigedemokraterna
  ])
];

addMdToPage(`
**"De tre kommuner d√§r partierna beh√∂ll sina positioner"** 
avser de kommuner d√§r det vinnande partiet fr√•n 2018 lyckades beh√•lla eller f√∂rstarka sin ledande position √§ven i valet 2022.‚Äã
`);
//5. –†–∏—Å—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫:

drawGoogleChart({
  type: 'ScatterChart',
  data: scatterData,
  options: {
    title: 'Samband mellan boendeaffordabilitet och partisupport (Topp 3)',
    height: 500,
    hAxis: { title: 'Tillv√§xt kvot (%)' },
    vAxis: { title: 'F√∂r√§ndring i r√∂ster (%)' },
    legend: { position: 'top' },
    pointSize: 3,
    series: {
      0: { color: '#FF0000', labelInLegend: 'Socialdemokraterna' }, // üî¥ –ö—Ä–∞—Å–Ω—ã–π
      1: { color: '#FFD700', labelInLegend: 'Moderaterna' },        // üü° –ñ—ë–ª—Ç—ã–π
      2: { color: '#FF00FF', labelInLegend: 'Sverigedemokraterna' }  // üå∏ –Ø—Ä–∫–∞—è —Ñ—É–∫—Å–∏—è!
    },
    chartArea: { left: 60, top: 50, width: '80%', height: '70%' }
  }
});


//pearson
//1. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:

let socialData = combinedTop3
  .filter(r => r.socialdemokraterna !== null && r.tillvaxtKvot !== null)
  .map(r => [r.tillvaxtKvot, r.socialdemokraterna]);

let moderatData = combinedTop3
  .filter(r => r.moderaterna !== null && r.tillvaxtKvot !== null)
  .map(r => [r.tillvaxtKvot, r.moderaterna]);

let sdData = combinedTop3
  .filter(r => r.sverigedemokraterna !== null && r.tillvaxtKvot !== null)
  .map(r => [r.tillvaxtKvot, r.sverigedemokraterna]);
//2. –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é:

let socialR = s.sampleCorrelation(
  socialData.map(r => r[0]),
  socialData.map(r => r[1])
);

let moderatR = s.sampleCorrelation(
  moderatData.map(r => r[0]),
  moderatData.map(r => r[1])
);

let sdR = s.sampleCorrelation(
  sdData.map(r => r[0]),
  sdData.map(r => r[1])
);
//3. –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:

addMdToPage(`
  ### üìà Samband mellan boendeaffordabilitet och partisupport (Pearson r)
  Pearsons statistiska test gav korrelationskoefficienterna:

  - **Socialdemokraterna**: r = **${socialR.toFixed(3)}**
  - **Moderaterna**: r = **${moderatR.toFixed(3)}**
  - **Sverigedemokraterna**: r = **${sdR.toFixed(3)}**

  ${Math.abs(socialR) < 0.2 && Math.abs(moderatR) < 0.2 && Math.abs(sdR) < 0.2
    ? "üî¥ Detta tyder p√• att det inte finns n√•gon stark direkt koppling mellan f√∂rs√§mrade boendekostnader och f√∂r√§ndringar i politiska preferenser p√• kommunniv√•."
    : "üîµ Vissa samband kan finnas!"}
`);


addMdToPage(`
<h3>üéØ Trots f√∂rs√§mrad bostadsaffordabilitet i m√•nga kommuner mellan 2018 och 2022, 
visar analyserna att v√§ljarnas lojalitet mot toppartierna i Sverige i stort sett f√∂rblev stabil. 
Politisk f√∂r√§ndring skedde mest p√• lokal niv√• utan tydligt samband till boendeekonomiska faktorer.</h3>
`);

