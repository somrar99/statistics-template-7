addMdToPage(`
  ## Hur h√§nger √•lder och valresultat ihop?

  Statistik handlar inte bara om siffror. Det handlar om m√§nniskor, samh√§llen ‚Äì och ibland, om hur v√•r √•lder kan speglas i hur vi r√∂star. I det h√§r projektet anv√§nder vi riktig data fr√•n tv√• k√§llor f√∂r att utforska ett m√∂jligt samband mellan medel√•ldern i en kommun och hur inv√•narna r√∂star i riksdagsvalet.

  ### üî¢ 1. Data ‚Äì grunden till ber√§ttelsen

  Vi har samlat data fr√•n tv√• olika databaser:
  - Medel√•lder per kommun fr√•n MongoDB (2018‚Äì2022), d√§r vi fokuserat p√• k√∂n = "totalt".
  - Valresultat fr√•n riksdagsvalet 2022 via en Neo4j-databas, d√§r vi kan se hur m√•nga r√∂ster varje parti f√•tt i varje kommun.

  Dessa tv√• datak√§llor har vi kopplat ihop, s√• att varje rad i v√•r gemensamma datam√§ngd inneh√•ller:
  - Kommunens namn
  - Det aktuella partiet
  - Antal r√∂ster 2022
  - Kommunens medel√•lder 2022

  ### üß≠ 2. Narrativ ‚Äì vad vill vi ber√§tta?

  Vi st√§ller fr√•gan: *Finns det ett samband mellan en kommuns medel√•lder och hur m√•nga r√∂ster ett visst parti f√•r?*

  Det √§r ett beskrivande ber√§ttars√§tt:
  > Vad ser vi i datan, och kan vi ana n√•gra m√∂nster?

  Genom en interaktiv dropdown kan anv√§ndaren v√§lja ett parti. D√§refter visas ett scatterplot d√§r varje punkt representerar en kommun. P√• x-axeln ser vi medel√•ldern, och p√• y-axeln antalet r√∂ster f√∂r det valda partiet.

  Exempel p√• m√∂nster vi kan se:
  - Milj√∂partiet verkar ha fler r√∂ster i kommuner med l√§gre medel√•lder.
  - Moderaterna visar starkt st√∂d i kommuner med n√•got h√∂gre √•lder.
  - Kristdemokraterna f√•r relativt h√∂ga toppar i vissa √§ldre kommuner.

  ###  3. Visualisering ‚Äì vi ser m√∂nstren tydligt

  Diagrammet du ser √§r en scatterplot ‚Äì en visuell karta av sambandet. Genom att v√§lja olika partier kan du sj√§lv utforska:
  - Om det finns n√•got tydligt m√∂nster
  - Om st√∂det √§r j√§mnt √∂ver alla kommuner
  - Eller om vissa partier √§r mer beroende av demografi

  Denna visualisering g√∂r det l√§tt att uppt√§cka s√•dant som annars skulle g√∂mma sig i tusentals siffror.

  ###  Slutsats ‚Äì vad betyder detta?

  Statistiken visar inte exakta orsaker, men den ger oss m√∂jligheter att f√∂rst√• samh√§llet b√§ttre. I detta fall har vi kunnat se att √•lder kan ha viss p√•verkan p√• hur olika kommuner r√∂star ‚Äì men det √§r bara b√∂rjan.

  N√§sta steg skulle kunna vara att inkludera fler variabler: utbildning, inkomst, urbanisering, eller region ‚Äì och se hur dessa samverkar.

  Det h√§r √§r statistikens kraft: att omvandla siffror till f√∂rst√•else.
`);

addMdToPage(`
  ### Medel√•lder, per kommun, fr√•n MongoDB  
  (Endast de 10 f√∂rsta posterna med k√∂n = "totalt".)  
`);

dbQuery.use("kommun-info-mongodb");

//vi ska g√∂ra en v√§riabel vilken inneh√•ller hela databas
let kommonmedel√•lder = await dbQuery
  .collection("ageByKommun")
  .find({ kon: "totalt" });
// H√§mta endast poster d√§r kon √§r "totalt"
let ages = await dbQuery
  .collection("ageByKommun")
  .find({ kon: "totalt" })
  .limit(10);

// Ta bort kolumnen _id
let filtreradeAldrar = ages.map(({ _id, ...resten }) => resten);

// Visa tabellen utan _id och bara med "totalt"
tableFromData({ data: filtreradeAldrar });

dbQuery.use("riksdagsval-neo4j");
let electionResults = await dbQuery("MATCH (n:Partiresultat) RETURN n LIMIT 5");
tableFromData({
  data: electionResults
    // egenskaper/kolumner kommer i lite konstig ordning fr√•n Neo - mappa i trevligare ordning
    .map(({ ids, kommun, roster2018, roster2022, parti, labels }) => ({
      ids: ids.identity,
      kommun,
      roster2018,
      roster2022,
      parti,
      labels,
    })),
});
//console.log("electionResults from neo4j", electionResults);

//Skapa en v√§riabel som innh√•ller obegr√§nsat databas fr√•n neo4j
let partirresultat = await dbQuery("MATCH (n:Partiresultat) RETURN n");

partirresultat.forEach((x) => (x.parti = x.parti.trim())); // eftersom mellanslag fr√•n databas efter Liberalerna, trimma (ta bort mellanslag i b√∂rjan och slutet av partinamn)

// Skapa en lookup-tabell per kommun fr√•n MongoDB
let medelAlderPerKommun = {};
kommonmedel√•lder.forEach((row) => {
  if (row.kommun && row.medelalderAr2022) {
    medelAlderPerKommun[row.kommun] = row.medelalderAr2022;
  }
});

// Skapa ny lista d√§r vi kopplar ihop varje partirresultat med medel√•lder
let valMedAlder = partirresultat.map(
  ({ ids, kommun, roster2018, roster2022, parti, labels }) => {
    return {
      kommun,
      parti,
      roster2022,
      medelalder: medelAlderPerKommun[kommun] || null,
    };
  }
);

// Filtrera bort kommuner d√§r medel√•lder saknas (null)
let valMedAlderFiltrerad = valMedAlder.filter(
  (item) => item.medelalder !== null
);

// Visa tabell
//tableFromData({ data: valMedAlderFiltrerad });

// F√∂r fels√∂kning i konsolen (frivilligt)
//console.log("Sammanfogad data:", valMedAlderFiltrerad);

// Steg 1: Ladda data
dbQuery.use("kommun-info-mongodb");
let medelAlderRader = await dbQuery
  .collection("ageByKommun").-
  .find({ kon: "totalt" });

addMdToPage(`
  ### Samband mellan medel√•lder och antal r√∂ster  
  V√§lj ett parti f√∂r att se sambandet mellan medel√•lder och valresultat i kommuner.
  <div id="chart-container" style="width: 100%; height: 500px;"></div>
`);
// Skapa plats f√∂r diagrammet ‚Äì m√•ste finnas i DOM

let allaPartier = [...new Set(partirresultat.map((p) => p.parti))].sort();
//console.log("Alla partier (options till dropdown):", allaPartier);
console.log(
  "Typ av allaPartier:",
  typeof allaPartier,
  Array.isArray(allaPartier)
);

// Dropdown f√∂r att v√§lja parti
let valtParti = addDropdown("Parti-val:", allaPartier);

// Filtrera p√• valt parti
let filtrerat = partirresultat
  .filter((p) => p.parti === valtParti)
  .map((p) => ({
    kommun: p.kommun,
    medelalder: medelAlderPerKommun[p.kommun],
    roster: p.roster2022,
  }));

console.log(filtrerat);

// Rita scatterplot
//console.log("Filtrerat data:", filtrerat);

drawGoogleChart({
  type: "ScatterChart",
  data: makeChartFriendly(filtrerat),
  options: {
    height: 500,
    chartArea: { left: 50, right: 0 },
    curveType: "function",
    pointSize: 5,
    pointShape: "circle",
    title: ``,
  },
});
