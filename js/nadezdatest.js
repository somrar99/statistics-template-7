
let vansterPartier = ['Arbetarepartiet-Socialdemokraterna', 'V√§nsterpartiet', 'Milj√∂partiet de gr√∂na', 'Centerpartiet'];
let hogerPartier = ['Moderaterna', 'Kristdemokraterna', 'Liberalerna', 'Sverigedemokraterna'];

// –°—É–º–º–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º

console.log([...new Set(electionResultsForWork.map(x => x.parti))])
let totalVanster2018 = electionResultsForWork
  .filter(x => vansterPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2018), 0);

let totalVanster2022 = electionResultsForWork
  .filter(x => vansterPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2022), 0);

let totalHoger2018 = electionResultsForWork
  .filter(x => hogerPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2018), 0);

let totalHoger2022 = electionResultsForWork
  .filter(x => hogerPartier.includes(x.parti))
  .reduce((sum, x) => sum + (+x.roster2022), 0);

// –û–±—â–∞—è —Å—É–º–º–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ
let total2018 = totalVanster2018 + totalHoger2018;
let total2022 = totalVanster2022 + totalHoger2022;

// –ü—Ä–æ—Ü–µ–Ω—Ç—ã
let percentVanster2018 = (totalVanster2018 / total2018 * 100).toFixed(1);
let percentVanster2022 = (totalVanster2022 / total2022 * 100).toFixed(1);
let percentHoger2018 = (totalHoger2018 / total2018 * 100).toFixed(1);
let percentHoger2022 = (totalHoger2022 / total2022 * 100).toFixed(1);

addToPage(`
  <section style="margin-top: 2em;">

    <h3 style="text-align: center;">R√∂ster per block ‚Äì hela landet</h3>

    <div style="display: flex; justify-content: space-between; gap: 40px; margin-top: 1.5em;">

      <div style="flex: 1; padding: 1em; background-color: #f9f9f9; border-radius: 0px;">
        <h4 style="text-align: center;">üó≥Ô∏è √Ör 2018</h4>
        <ul style="list-style-type: none; padding: 0;">
          <li><strong>V√§nsterblocket:</strong> ${totalVanster2018.toLocaleString('sv-SE')} r√∂ster (${percentVanster2018}%)</li>
          <li><strong>H√∂gerblocket:</strong> ${totalHoger2018.toLocaleString('sv-SE')} r√∂ster (${percentHoger2018}%)</li>
        </ul>
      </div>

      <div style="flex: 1; padding: 1em; background-color: #f9f9f9; border-radius: 0px;">
        <h4 style="text-align: center;">üó≥Ô∏è √Ör 2022</h4>
        <ul style="list-style-type: none; padding: 0;">
          <li><strong>V√§nsterblocket:</strong> ${totalVanster2022.toLocaleString('sv-SE')} r√∂ster (${percentVanster2022}%)</li>
          <li><strong>H√∂gerblocket:</strong> ${totalHoger2022.toLocaleString('sv-SE')} r√∂ster (${percentHoger2022}%)</li>
        </ul>
      </div>

    </div>

  </section>
`);






// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
let blockData = [
  { √•r: '2018', V√§nster: totalVanster2018, H√∂ger: totalHoger2018 },
  { √•r: '2022', V√§nster: totalVanster2022, H√∂ger: totalHoger2022 }
];


// –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
drawGoogleChart({
  type: 'ColumnChart',
  data: makeChartFriendly(blockData, '√•r', 'V√§nster', 'H√∂ger'),
  options: {
    title: 'V√§nster- och h√∂gerblockets r√∂ster i hela landet (2018 vs 2022)',
    height: 500,
    legend: { position: 'top' },
    hAxis: {
      title: '√Ör',
      slantedText: true
    },
    vAxis: {
      title: 'Antal r√∂ster',
      format: '#',
      minValue: 0 // ‚Üê —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    },
    chartArea: { left: 80, width: '80%' },
    colors: ['#dc3912', '#3366cc'] // —Å–∏–Ω–∏–π –∏ –∫—Ä–∞—Å–Ω—ã–π, –∫–∞–∫ –≤ –ª–µ–≥–µ–Ω–¥–µ
  }
});


// Kommuner d√§r vinnande parti har √§ndrats (2018 ‚Üí 2022)
let kommunerMedByte = sammanstallning
  .filter(r => r.byte === "!!! Ja!!!")
  .map(r => r.kommun);

// Kommuner d√§r samma parti vann b√•de 2018 och 2022
let stabilaKommuner = sammanstallning
  .filter(r => r.byte === "-")
  .map(r => r.kommun);





addMdToPage("### Vinnande parti per kommun - med byte mellan 2018 och 2022");

addToPage(`
  <h3>Antal kommuner med partibyte (2018‚Äì2022):</h3>
  <p style="font-size: 1.2em; font-weight: bold; color: darkred;">
    ${kommunerMedByte.length} kommuner har bytt vinnande parti
  </p>
`);



tableFromData({
  data: sammanstallning.map(row => {
    const highlight = row.byte === " Ja";
    return {
      kommun: row.kommun,
      vinnare2018: row.vinnare2018,
      roster2018: row.roster2018,
      vinnare2022: row.vinnare2022,
      roster2022: row.roster2022,
      byte: row.byte
    };
  })
});


//console.log(electionResultsForWork.filter(x => x.parti === "Liberalerna "));

// –î–æ—Å—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–æ–¥–æ–≤ –∏ –ø–∞—Ä—Ç–∏–π
let years = [2018, 2022];
let partier = [...new Set(electionResultsForWork.map(x => x.parti))].sort();

// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
let year = addDropdown('V√§lj √•r', years, 2022);


/*
// 2. –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º—É–Ω, –≥–¥–µ –ø–∞—Ä—Ç–∏—è –ø–æ–±–µ–¥–∏–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ–¥—É
let antalKommunerMedVinst = sammanstallning.filter(row =>
  (year == 2018 && row.vinnare2018 === chosenParti) ||
  (year == 2022 && row.vinnare2022 === chosenParti)
).length;
*/

// –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
let totalVotes = s.sum(
  electionResultsForWork.map(x => year === 2018 ? +x.roster2018 : +x.roster2022)
);

// –¢–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏
let percentPerParty = partier.map(parti => {
  let partyVotes = s.sum(
    electionResultsForWork
      .filter(x => x.parti === parti)
      .map(x => year == 2018 ? +x.roster2018 : +x.roster2022)
  );

  let percent = ((partyVotes / totalVotes) * 100).toFixed(1);

  return { parti, percent: +percent }; // ‚úÖ –ø–ª—é—Å –¥–µ–ª–∞–µ—Ç —á–∏—Å–ª–æ
});

// –í—ã–≤–µ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log(percentPerParty);


//DATASET https://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__ME__ME0104__ME0104D/ME0104T4/

/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º

addToPage(`
  <div style="display: flex; justify-content: space-between; gap: 30px; align-items: flex-start;">
    
    <div style="flex: 1;">
      <h3>${chosenParti}, √•r ${year}</h3>
      <p>Partiet <strong>${chosenParti}</strong> vann i <strong>${antalKommunerMedVinst}</strong> kommuner.</p>
      <p>Totalt antal r√∂ster: <strong>${partyVotes.toLocaleString('sv-SE')}</strong> i landet f√∂r valt √•r.</p>
      <p>Andel av alla r√∂ster: <strong>${percent}%</strong></p>
    </div>

    <div id="pieChartContainer" style="flex: 1;"></div>

  </div>
`);

drawGoogleChart({
  type: 'PieChart',
  elementId: 'pieChartContainer',
  data: [
    ['Parti', 'R√∂ster'],
    [chosenParti, partyVotes],
    ['√ñvriga', totalVotes - partyVotes]
  ],
  options: {
    title: `Andel av r√∂ster, √•r ${year}`,
    height: 300,
    pieHole: 0.4
  }
});
*/

// –†–∏—Å—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
drawGoogleChart({
  type: 'PieChart',
  data: makeChartFriendly(
    percentPerParty,
    'parti', 'percent'
  ),
  options: {
    title: `R√∂stf√∂rdelning per parti (${year})`,
    height: 500,
    pieHole: 0.4, // –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π "donut chart", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    chartArea: { left: "10%" }
  }
});


// 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
let top3Partier = percentPerParty
  .sort((a, b) => b.percent - a.percent)
  .slice(0, 3) // —Ç–æ–ª—å–∫–æ 3 –ª—É—á—à–∏–µ
  .map(x => x.parti); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–π


//–ö—Ä–∞—Ç–∫–æ: –Ω–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã, –∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ª–∏–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç.
//1. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π:

let procentPerParti = {}; // { 'Partinamn': [procent1, procent2, ...], ... }

for (let kommun in grupperadElectionResultsForWork) {
  let lista = grupperadElectionResultsForWork[kommun];

  let total = s.sum(lista.map(r => +r[`roster${year}`]));

  for (let rad of lista) {
    let parti = rad.parti;
    let partiroster = +rad[`roster${year}`];
    let procent = (partiroster / total) * 100;

    if (!procentPerParti[parti]) procentPerParti[parti] = [];

    procentPerParti[parti].push(+procent.toFixed(2));
  }
}
//2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ procentBuckets:

let procentBuckets = {}; // { 'Partinamn': {0: 5, 1: 8, 2: 3, ...}, ... }

for (let parti in procentPerParti) {
  let procentLista = procentPerParti[parti];

  let partiBuckets = {};

  for (let p of procentLista) {
    let bucket = Math.floor(p); // –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ —Ü–µ–ª–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    partiBuckets[bucket] = (partiBuckets[bucket] || 0) + 1;
  }

  procentBuckets[parti] = partiBuckets;
}
//3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:

let procentInterval = Array.from({ length: 101 }, (_, i) => i); // 0‚Äì100%

let dataForChart = procentInterval.map(p => {
  let row = { 'Procent r√∂ster': p };

  for (let parti in procentBuckets) {
    row[parti] = procentBuckets[parti][p] || 0; // –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞, —Å—Ç–∞–≤–∏–º 0
  }

  return row;
});
//4. –°—Ç—Ä–æ–∏–º –ª–∏–Ω–∏–∏ –Ω–∞ LineChart:

drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(
    dataForChart,
    'Procent r√∂ster',
    ...Object.keys(procentBuckets) // –≤—Å–µ –ø–∞—Ä—Ç–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  ),
  options: {
    title: 'R√∂stf√∂rdelning per parti i kommunerna',
    height: 500,
    //curveType: 'function',
    legend: { position: 'top', maxLines: 3 },
    hAxis: {
      title: 'Procent r√∂ster',
      viewWindow: {
        min: 0,
        max: 55
      }
    },
    vAxis: { title: 'Antal kommuner' },
    chartArea: { left: 60, top: 60, width: '80%', height: '70%' },
    tooltip: { isHtml: true },  // –≤–∫–ª—é—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML tooltip
  }
});




let chosenParti = addDropdown('V√§lj parti', partier);

// –°–æ–±–∏—Ä–∞–µ–º % –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é –ø–æ kommun
let procentData = [];

for (let kommun in grupperadElectionResultsForWork) {
  let lista = grupperadElectionResultsForWork[kommun];

  let total = s.sum(lista.map(r => +r[`roster${year}`]));
  let partiRad = lista.find(r => r.parti === chosenParti);
  if (!partiRad) continue;

  let partiroster = +partiRad[`roster${year}`];
  let procent = (partiroster / total) * 100;

  procentData.push({
    kommun,
    procent: +procent.toFixed(2)
  });
}

/*
addMdToPage(`üìä Totalt antal kommuner i analysen: **${procentData.length}**`);



drawGoogleChart({
  type: 'Histogram',
  data: [
    ['Procent r√∂ster'],
    ...procentData.map(x => [x.procent])
  ],
  options: {
    title: `Andel r√∂ster f√∂r ${chosenParti} i varje kommun (${year})`,
    height: 400,
    histogram: { bucketSize: 2 },
    hAxis: { title: 'Procent r√∂ster' },
    vAxis: { title: 'Antal kommuner' }
  }
});

let median = s.median(procentData.map(x => x.procent));
let max = s.max(procentData.map(x => x.procent));
let min = s.min(procentData.map(x => x.procent));

addMdToPage(`
### Statistik: ${chosenParti} (${year})
- üßÆ Medianandel per kommun: **${median.toFixed(1)}%**
- üìà H√∂gsta andel: **${max.toFixed(1)}%**
- üìâ L√§gsta andel: **${min.toFixed(1)}%**
`);


let values = procentData.map(x => x.procent);
let result = stdLib.stats.shapiroWilkTest(values);

addMdToPage(`
### üìê Shapiro-Wilk normalitetstest
- p-v√§rde: **${result.p.toFixed(4)}**
- ${result.p < 0.05
    ? "‚ùå F√∂rdelningen verkar inte vara normalf√∂rdelad"
    : "‚úÖ F√∂rdelningen verkar vara normalf√∂rdelad"}
`);




//–æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Å procentData –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π:
dbQuery.use('kommun-info-mongodb');
let income = await dbQuery.collection('incomeByKommun').find({});
console.log('income from mongodb', income);

let incomeDataForTable = income.map(x => ({
  kommun: x.kommun,
  k√∂n: x.kon,
  medelInkomst2018: x.medelInkomst2018,
  medelInkomst2019: x.medelInkomst2019,
  medelInkomst2020: x.medelInkomst2020,
  medelInkomst2021: x.medelInkomst2021,
  medelInkomst2022: x.medelInkomst2022,
  medianInkomst2018: x.medianInkomst2018,
  medianInkomst2019: x.medianInkomst2019,
  medianInkomst2020: x.medianInkomst2020,
  medianInkomst2021: x.medianInkomst2021,
  medianInkomst2022: x.medianInkomst2022
}));


let korrelationData = procentData.map(p => {
  let row = incomeDataForTable.find(i => i.kommun === p.kommun && i.k√∂n === 'totalt');
  return row ? { kommun: p.kommun, procent: p.procent, inkomst: row.medelInkomst2022 } : null;
}).filter(x => x);


let r = s.sampleCorrelation(
  korrelationData.map(x => x.inkomst),
  korrelationData.map(x => x.procent)
);

addMdToPage(`
### üìà Enkel korrelation mellan inkomst och r√∂standel f√∂r ${chosenParti}
- Pearson r: **${r.toFixed(3)}**
- ${Math.abs(r) > 0.4
    ? "‚ÜóÔ∏è Det verkar finnas ett samband"
    : "‚ÜîÔ∏è Svagt eller inget tydligt samband"}
`);
*/





dbQuery.use('geo-mysql');
let geoData = await dbQuery('SELECT * FROM geoData  ORDER BY latitude');

// 1. –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å kommun ‚Üí l√§n
let kommunTillLan = {};
for (let row of geoData) {
  kommunTillLan[row.municipality] = row.county;
}

// 2. –°—Ç—Ä–æ–∏–º lanByteRaknare –Ω–∞ –æ—Å–Ω–æ–≤–µ kommunerMedByte
let lanByteRaknare = {};
for (let kommun of kommunerMedByte) {
  let geoRad = geoData.find(x => x.municipality === kommun);
  if (!geoRad) continue;

  let lan = geoRad.county;
  if (!lanByteRaknare[lan]) {
    lanByteRaknare[lan] = 0;
  }
  lanByteRaknare[lan]++;
}
/*
// ‚úÖ 3. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lanByteRaknare!
let lanByteLista = Object.entries(lanByteRaknare)
  .map(([lan, antal]) => ({ L√§n: lan, 'Antal byten': antal }))
  .sort((a, b) => b['Antal byten'] - a['Antal byten']);

addMdToPage(`### L√§n d√§r vinnande parti byttes i kommuner (2018‚Äì2022)`);

tableFromData({
  data: lanByteLista
});

drawGoogleChart({
  type: 'ColumnChart',
  data: [['L√§n', 'Antal byten'], ...lanByteLista.map(x => [x.L√§n, x['Antal byten']])],
  options: {
    title: 'Kommuner med partibyte per l√§n (2018‚Äì2022)',
    height: 600,
    chartArea: { left: 100 },
    legend: { position: 'none' },
    hAxis: { slantedText: true, slantedTextAngle: 45, min: 0 }
  }
});
*/


//Dataset fr√•n https://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BO__BO0501__BO0501B/FastprisSHRegionAr/sortedtable/tableViewSorted/



/*
//2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –ø–æ –ø–∞—Ä—Ç–∏—è–º: —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É 2022 –∏ 2018

let diffVotes = electionResultsForWork
  .filter(x => x.parti === chosenParti)
  .map(x => +x.roster2022 - +x.roster2018);


/*üîπ –í–∞—Ä–∏–∞–Ω—Ç 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–Ω–∏—Ü—ã –≥–æ–ª–æ—Å–æ–≤
–û—Å—å X ‚Äî —ç—Ç–æ —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º —Ä–∞–∑–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç ‚àí1000 –¥–æ +1000)

–û—Å—å Y ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º—É–Ω, –ø–æ–ø–∞–≤—à–∏—Ö –≤ –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

üîÅ –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
–ë–æ–ª—å—à–µ –∫–æ–º–º—É–Ω –ø—Ä–∏–±–∞–≤–∏–ª–∏ –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –≥–æ–ª–æ—Å–∞? –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ?
*/
/*
drawGoogleChart({
  type: 'Histogram',
  data: makeChartFriendly(
    diffVotes.map(x => ({ x })), // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤: { x: —á–∏—Å–ª–æ }
    'Œî r√∂ster'
  ),
  options: {
    title: `R√∂stf√∂r√§ndring f√∂r ${chosenParti} per kommun (2022 ‚àí 2018)`,
    height: 500,
    histogram: { bucketSize: 250 }
  }
});

/*üîπ –í–∞—Ä–∏–∞–Ω—Ç 2: –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è (scatterplot)
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–º—É–Ω–µ:

–û—Å—å X ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –≤ 2018

–û—Å—å Y ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –≥–æ–ª–æ—Å–æ–≤ –º–µ–∂–¥—É 2022 –∏ 2018

–≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
*/
/*
let scatterData = electionResultsForWork
  .filter(x => x.parti === chosenParti)
  .map(x => ({
    roster2018: +x.roster2018,
    diff: +x.roster2022 - +x.roster2018
  }));

drawGoogleChart({
  type: 'ScatterChart',
  data: makeChartFriendly(scatterData, 'roster2018', 'Œî r√∂ster'),
  options: {
    title: `R√∂stf√∂r√§ndring f√∂r ${chosenParti} i f√∂rh√•llande till st√∂d 2018`,
    height: 500,
    hAxis: { title: 'R√∂ster 2018' },
    vAxis: { title: 'F√∂r√§ndring (2022 ‚àí 2018)' }
  }
});
*/


// –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ –∏ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
let percentChanges = electionResultsForWork
  .filter(x => x.parti === chosenParti && +x.roster2018 > 0) // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º—É–Ω—ã —Å 0 –≥–æ–ª–æ—Å–æ–≤ –≤ 2018
  .map(x => ((+x.roster2022 / +x.roster2018) - 1) * 100);


// 2. –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
let mean = s.mean(percentChanges);
let stdDev = s.standardDeviation(percentChanges);

// 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
let binWidth = 5;
let bins = {};
for (let change of percentChanges) {
  let bin = Math.floor(change / binWidth) * binWidth;
  bins[bin] = (bins[bin] || 0) + 1;
}

// 4. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—ã –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
let histogramData = Object.entries(bins).map(([bin, count]) => ({
  'F√∂r√§ndring (%)': +bin,
  'Antal kommuner': count,
  'Teoretisk normalf√∂rdelning': null
}));

// 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é
let minX = Math.min(...percentChanges) - 10;
let maxX = Math.max(...percentChanges) + 10;
let stepSize = 0.5; // —à–∞–≥ –ø–æ –æ—Å–∏ X

for (let x = minX; x <= maxX; x += stepSize) {
  let yDensity = (1 / (stdDev * Math.sqrt(2 * Math.PI))) * Math.exp(-((x - mean) ** 2) / (2 * stdDev ** 2));
  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –≤—ã—Å–æ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º—É–Ω
  let scaledY = yDensity * percentChanges.length * binWidth;

  histogramData.push({
    'F√∂r√§ndring (%)': x,
    'Antal kommuner': null,
    'Teoretisk normalf√∂rdelning': scaledY
  });
}

// 6. –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
drawGoogleChart({
  type: 'ComboChart',
  data: makeChartFriendly(
    histogramData,
    'F√∂r√§ndring (%)', 'Antal kommuner', 'Teoretisk normalf√∂rdelning'
  ),
  options: {
    title: `Procentuell f√∂r√§ndring i r√∂ster f√∂r ${chosenParti} mellan 2018 och 2022`,
    height: 500,
    seriesType: 'bars', // –±–∞–∑–æ–≤–∞—è —Å–µ—Ä–∏—è - —Å—Ç–æ–ª–±–∏–∫–∏
    series: {
      1: { type: 'line', color: 'red', lineWidth: 3 } // –≤—Ç–æ—Ä–∞—è —Å–µ—Ä–∏—è - –ª–∏–Ω–∏—è
    },
    vAxis: { title: 'Antal kommuner' },
    hAxis: { title: 'F√∂r√§ndring (%)' },
    legend: { position: 'top', alignment: 'center' },
    chartArea: { left: 50, top: 60, width: '80%', height: '70%' }
  }
});

//–ü–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Shapiro-Wilk
// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤
let result = stdLib.stats.shapiroWilkTest(percentChanges);

// 2. –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
addMdToPage(`
### üìê Shapiro-Wilk normalitetstest f√∂r procentuell f√∂r√§ndring

- **p-v√§rde**: ${result.p.toFixed(4)}
- ${result.p < 0.05
    ? "‚ùå F√∂rdelningen verkar inte vara normalf√∂rdelad"
    : "‚úÖ F√∂rdelningen verkar vara normalf√∂rdelad"}
`);



